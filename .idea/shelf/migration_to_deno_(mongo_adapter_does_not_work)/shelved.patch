Index: src/mongo.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { ISession } from '@satont/grammy-mongodb-storage'\nimport { MongoClient } from 'mongodb'\nimport env from '~/env'\n\n// eslint-disable-next-line import/prefer-default-export\nexport async function mongoInit() {\n  const client = new MongoClient(env.MONGO)\n  await client.connect()\n  const db = client.db('wakyy')\n  return db.collection<ISession>('users')\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/mongo.ts b/src/mongo.ts
--- a/src/mongo.ts	(revision 58bb2b733d415537023b7552355033cdd407a4a2)
+++ b/src/mongo.ts	(date 1643492906483)
@@ -1,11 +1,21 @@
-import { ISession } from '@satont/grammy-mongodb-storage'
-import { MongoClient } from 'mongodb'
-import env from '~/env'
+import { ISession } from 'https://x.nest.land/grammy-mongodb-storage@1.1.0/src/mod.ts'
+import { MongoClient } from 'https://deno.land/x/mongo@v0.29.1/mod.ts'
+import { conf } from './env.ts'
 
 // eslint-disable-next-line import/prefer-default-export
 export async function mongoInit() {
-  const client = new MongoClient(env.MONGO)
-  await client.connect()
-  const db = client.db('wakyy')
+  console.info("connecting to mongo")
+  const client = new MongoClient()
+  console.info("connecting to mongo1")
+
+  console.info(conf.MONGO)
+  try {
+    await client.connect(conf.MONGO)
+  } catch (e) {
+    console.error("ERROR", e)
+  }
+  console.info("connecting to mongo2")
+
+  const db = client.database('wakyy')
   return db.collection<ISession>('users')
 }
Index: src/bot.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Context as BaseContext } from 'grammy'\nimport { Bot, SessionFlavor, session } from 'grammy'\nimport { Collection } from 'mongodb'\nimport { I18n, I18nContextFlavor } from '@grammyjs/i18n'\nimport { ISession, MongoDBAdapter } from '@satont/grammy-mongodb-storage'\nimport {\n  handleHelp,\n  handleProgress,\n  handleTarget,\n  handleToday,\n} from '~/handlers'\nimport { ignoreOld, sequentialize } from 'grammy-middlewares'\nimport env from '~/env'\n\nexport interface SessionData {\n  step: 'idle' | 'target'\n  target: Date | null\n  days: number\n}\n\nfunction initialSession(): SessionData {\n  return { step: 'idle', target: null, days: 0 }\n}\n\nexport type Context = BaseContext &\n  I18nContextFlavor &\n  SessionFlavor<SessionData>\n\nexport const bot = new Bot<Context>(env.TOKEN)\n\nconst i18n = new I18n({\n  defaultLanguage: 'en',\n  directory: 'locales',\n  useSession: true,\n})\n\nexport async function initBot(collectionUsers: Collection<ISession>) {\n  bot\n    .use(sequentialize())\n    .use(\n      session({\n        initial: initialSession,\n        storage: new MongoDBAdapter({ collection: collectionUsers }),\n      })\n    )\n    .use(i18n.middleware())\n    .use(ignoreOld())\n\n  bot.command('target', handleTarget)\n  bot.command('help', handleHelp)\n  bot.command('progress', handleProgress)\n  bot.command('today', handleToday)\n\n  bot.catch(console.error)\n\n  await bot.init()\n  await bot.api.setMyCommands([\n    { command: 'target', description: 'Set wake up target' },\n    { command: 'today', description: \"Record today's wake up time\" },\n    { command: 'progress', description: 'Show progress' },\n    { command: 'help', description: 'Show help' },\n  ])\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/bot.ts b/src/bot.ts
--- a/src/bot.ts	(revision 58bb2b733d415537023b7552355033cdd407a4a2)
+++ b/src/bot.ts	(date 1643493150839)
@@ -1,16 +1,23 @@
-import { Context as BaseContext } from 'grammy'
-import { Bot, SessionFlavor, session } from 'grammy'
-import { Collection } from 'mongodb'
-import { I18n, I18nContextFlavor } from '@grammyjs/i18n'
-import { ISession, MongoDBAdapter } from '@satont/grammy-mongodb-storage'
+import {
+  Bot,
+  Context as BaseContext,
+  SessionFlavor,
+  session,
+} from 'https://deno.land/x/grammy/mod.ts'
+
+import { Collection, MongoClient } from 'https://deno.land/x/mongo@v0.29.1/mod.ts'
+import { I18n, I18nContext } from 'https://deno.land/x/grammy_i18n@v0.2.1/source/mod.ts'
+import {
+  ISession,
+  MongoDBAdapter,
+} from 'https://x.nest.land/grammy-mongodb-storage@1.1.0/src/mod.ts'
 import {
   handleHelp,
   handleProgress,
   handleTarget,
   handleToday,
-} from '~/handlers'
-import { ignoreOld, sequentialize } from 'grammy-middlewares'
-import env from '~/env'
+} from './handlers.ts'
+import { conf } from './env.ts'
 
 export interface SessionData {
   step: 'idle' | 'target'
@@ -23,28 +30,32 @@
 }
 
 export type Context = BaseContext &
-  I18nContextFlavor &
+  I18nContext &
   SessionFlavor<SessionData>
 
-export const bot = new Bot<Context>(env.TOKEN)
+export const bot = new Bot<Context>(conf.TOKEN)
 
-const i18n = new I18n({
+const i18nConfig = {
   defaultLanguage: 'en',
   directory: 'locales',
   useSession: true,
-})
+}
+
+const i18n = new I18n(i18nConfig)
 
 export async function initBot(collectionUsers: Collection<ISession>) {
+  const client = new MongoClient();
+  await client.connect("mongodb://localhost:27017");
+  const db = client.database("test");
+  const sessions = db.collection<ISession>("users");
+
   bot
-    .use(sequentialize())
     .use(
       session({
         initial: initialSession,
-        storage: new MongoDBAdapter({ collection: collectionUsers }),
+        storage: new MongoDBAdapter({ collection: sessions }),
       })
     )
-    .use(i18n.middleware())
-    .use(ignoreOld())
 
   bot.command('target', handleTarget)
   bot.command('help', handleHelp)
@@ -60,4 +71,5 @@
     { command: 'progress', description: 'Show progress' },
     { command: 'help', description: 'Show help' },
   ])
+  return bot
 }
Index: src/handlers.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Context } from '~/bot'\n\nexport function handleHelp(ctx: Context) {\n  return ctx.reply(ctx.i18n.t('help'))\n}\n\nexport async function handleTarget(ctx: Context) {\n  const date = parseTimestamp(ctx.match)\n  if (!date) {\n    return ctx.reply(\n      'Please provide target wake-up time as `/target 10:05` or simply as `/target 1005`'\n    )\n  }\n\n  ctx.session.target = date\n  console.log('saving target: ', date)\n\n  await ctx.reply(\n    `Successfully saved target time ${date.getHours()}:${date\n      .getMinutes()\n      .toString()\n      .padStart(2, '0')}`\n  )\n}\n\nexport function handleProgress(ctx: Context) {\n  const days = ctx.session.days\n  void ctx.reply(`You are doing great for ${days} days`)\n}\n\nexport async function handleToday(ctx: Context) {\n  const targetDate = ctx.session.target\n  if (!targetDate) {\n    await ctx.reply(\n      'Please specify the target time first with `/target` command'\n    )\n    return\n  }\n\n  const wakeDate = parseTimestamp(ctx.match)\n  if (!wakeDate) {\n    return ctx.reply(\n      \"Please record today's wake-up time as `/today 10:05` or simply as `/today 1005`\"\n    )\n  }\n\n  const success = hasSucceed(targetDate, wakeDate)\n  const days = ctx.session.days\n\n  if (success) {\n    const res = days + 1\n    ctx.session.days = res\n    await ctx.reply(`Congrats, you rock! You are doing great for last ${res}`)\n  } else {\n    ctx.session.days = 0\n    await ctx.reply(\n      `Oops, the successful row of ${days} days has been broken. No worries, tomorrow is a new day and this time is going to be different.`\n    )\n  }\n  return\n}\n\nfunction hasSucceed(target: Date, actual: Date) {\n  if (actual.getHours() < target.getHours()) {\n    return true\n  }\n  if (\n    actual.getHours() == target.getHours() &&\n    actual.getMinutes() <= target.getMinutes()\n  ) {\n    return true\n  }\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function parseTimestamp(input: string | RegExpMatchArray | undefined) {\n  if (typeof input !== 'string') {\n    return null\n  }\n\n  const data = input.replace(':', '')\n  let hours, minutes\n\n  if (data.length == 4) {\n    // 1000\n    hours = data.slice(0, 2)\n    minutes = data.slice(2)\n  } else if (data.length == 3) {\n    // 900\n    hours = data.slice(0, 1)\n    minutes = data.slice(1)\n  } else {\n    return null\n  }\n\n  const date = new Date()\n\n  try {\n    date.setHours(parseInt(hours), parseInt(minutes))\n  } catch (e) {\n    console.log('failed to parse timestamp ', e)\n    return null\n  }\n\n  return date\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/handlers.ts b/src/handlers.ts
--- a/src/handlers.ts	(revision 58bb2b733d415537023b7552355033cdd407a4a2)
+++ b/src/handlers.ts	(date 1643490744659)
@@ -1,7 +1,7 @@
-import { Context } from '~/bot'
+import { Context } from './bot.ts'
 
 export function handleHelp(ctx: Context) {
-  return ctx.reply(ctx.i18n.t('help'))
+  return ctx.reply(ctx.t('help'))
 }
 
 export async function handleTarget(ctx: Context) {
Index: src/app.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'module-alias/register'\nimport 'reflect-metadata'\nimport 'source-map-support/register'\n\nimport { bot, initBot } from '~/bot'\nimport { mongoInit } from '~/mongo'\nimport { run } from '@grammyjs/runner'\n\nasync function runApp() {\n  console.info('Starting app...')\n\n  const collectionUsers = await mongoInit()\n  console.info('Mongo connected')\n\n  await initBot(collectionUsers)\n  console.info('Initialized bot')\n\n  const runner = run(bot)\n  console.info(`Bot ${bot.botInfo.username} is up and running`)\n\n  const stopRunner = () => runner.isRunning() && runner.stop()\n  process.once('SIGINT', stopRunner)\n  process.once('SIGTERM', stopRunner)\n}\n\nvoid runApp()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app.ts b/src/app.ts
--- a/src/app.ts	(revision 58bb2b733d415537023b7552355033cdd407a4a2)
+++ b/src/app.ts	(date 1643491816428)
@@ -1,26 +1,13 @@
-import 'module-alias/register'
-import 'reflect-metadata'
-import 'source-map-support/register'
 
-import { bot, initBot } from '~/bot'
-import { mongoInit } from '~/mongo'
-import { run } from '@grammyjs/runner'
+import { initBot } from './bot.ts'
+import { mongoInit } from './mongo.ts'
 
-async function runApp() {
-  console.info('Starting app...')
+console.info('Starting app...')
 
-  const collectionUsers = await mongoInit()
-  console.info('Mongo connected')
+const collectionUsers = await mongoInit()
+console.info('Mongo connected')
 
-  await initBot(collectionUsers)
-  console.info('Initialized bot')
+const bot = await initBot(collectionUsers)
+console.info('Initialized bot')
 
-  const runner = run(bot)
-  console.info(`Bot ${bot.botInfo.username} is up and running`)
-
-  const stopRunner = () => runner.isRunning() && runner.stop()
-  process.once('SIGINT', stopRunner)
-  process.once('SIGTERM', stopRunner)
-}
-
-void runApp()
+bot.start()
Index: src/env.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as dotenv from 'dotenv'\nimport { cleanEnv, str } from 'envalid'\nimport { cwd } from 'process'\nimport { resolve } from 'path'\n\ndotenv.config({ path: resolve(cwd(), '.env') })\n\n// eslint-disable-next-line node/no-process-env\nexport default cleanEnv(process.env, {\n  TOKEN: str(),\n  MONGO: str(),\n})\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/env.ts b/src/env.ts
--- a/src/env.ts	(revision 58bb2b733d415537023b7552355033cdd407a4a2)
+++ b/src/env.ts	(date 1643491506158)
@@ -1,12 +1,2 @@
-import * as dotenv from 'dotenv'
-import { cleanEnv, str } from 'envalid'
-import { cwd } from 'process'
-import { resolve } from 'path'
 
-dotenv.config({ path: resolve(cwd(), '.env') })
-
-// eslint-disable-next-line node/no-process-env
-export default cleanEnv(process.env, {
-  TOKEN: str(),
-  MONGO: str(),
-})
+export const conf = Deno.env.toObject();
